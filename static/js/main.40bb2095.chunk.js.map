{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/DisplayReview.js","components/AddReview.js","components/Reviews.js","components/ShowList.js","components/Shows.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","title","Component","Footer","DisplayReview","reviews","deleteReview","reviewList","length","map","review","name","comment","id","style","width","fontSize","onClick","AddReview","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","contentOfReview","concat","emptyString","replace","console","log","newTitle","newName","newComment","props","addReview","onSubmit","this","type","placeholder","onChange","Reviews","newReview","Math","floor","random","newData","filter","ShowList","isFavourite","isInfoVisible","handleClick","prevProps","show","genres","str","myStyle","display","key","src","image","medium","alt","network","premiered","status","language","React","Shows","shows","showList","join","summary","App","prevEpisodes","axios","get","then","response","content","data","item","links","_links","previousepisode","nextepisode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40bb2095.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../style.css';\r\n\r\nclass Navbar extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className='navigation'>\r\n            <nav>\r\n                <h1>TVMaze</h1>\r\n                \r\n                <div className='menu'>\r\n                    <a href='#review-section' title='Write a review'><span>Write a review</span></a>\r\n                </div>\r\n            </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\r\nimport '../style.css';\r\n\r\n\r\nclass Footer extends Component{\r\n    \r\n    render(){\r\n        return(\r\n                <footer>\r\n                    <ul className=\"contact\">\r\n                        <li className=\"links\"><a href=\"https://www.instagram.com/\">Instagram</a></li> \r\n                        <li className=\"links\"><a href=\"https://twitter.com/explore\">Twitter</a></li>\r\n                        <li className=\"links\"><a href=\"https://www.facebook.com/\">Facebook</a></li>\r\n                    </ul>\r\n                </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../style.css';\r\n\r\nconst DisplayReview = ({reviews, deleteReview}) =>{\r\n\r\n    const reviewList = reviews.length ? reviews.map( review =>{\r\n        let {name, title, comment, id} = review;\r\n\r\n        \r\n        return(\r\n            <div className=\"card review-element\" style={{width: \"18rem\"}}>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{title}</h5>\r\n                    <p className=\"card-text\">{comment}</p>\r\n                    <p className=\"card-text blockquote-footer\" style={{fontSize:'1.2em'}}><small className=\"text-muted\">{name}</small></p>\r\n                    <button className=\"btn btn-outline-danger\" onClick = { () => {deleteReview(id)}}>Delete</button>\r\n                </div>\r\n                </div>\r\n            )\r\n        \r\n    }) : <p>No reviews yet</p>\r\n\r\n    return(\r\n        <div className='review-display'>\r\n            {reviewList}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DisplayReview;","import React, {Component} from 'react';\r\nimport '../style.css';\r\n\r\nclass AddReview extends Component{\r\n\r\n    state = {\r\n        name: '',\r\n        title: '',\r\n        comment: ''\r\n    }\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        });\r\n    }\r\n    handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        let contentOfReview = this.state.title.concat(this.state.name);\r\n        contentOfReview = contentOfReview.concat(this.state.comment);\r\n        let emptyString = contentOfReview.replace(/ /g, \"\");\r\n        console.log(emptyString);\r\n\r\n        //removing blank spaces to check for empty string\r\n        let newTitle = this.state.title.replace(/ /g, \"\");\r\n        let newName = this.state.name.replace(/ /g, \"\");\r\n        let newComment = this.state.comment.replace(/ /g, \"\");\r\n\r\n        if(emptyString && newTitle && newName && newComment){\r\n            this.props.addReview(this.state);\r\n            this.setState({\r\n                name:'',\r\n                title:'',\r\n                comment:''\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='review-form'>\r\n                <h2>Write your reviews here</h2>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type='text' id='name' placeholder='Enter name' onChange={this.handleChange} value = {this.state.name}></input><br/>\r\n                    <input type='text' id='title' placeholder='Enter title' onChange={this.handleChange} value = {this.state.title}></input><br/>\r\n                    <textarea id='comment' placeholder='Comment here' onChange={this.handleChange} value = {this.state.comment}></textarea><br/>\r\n                    <input className=\"btn btn-danger\"type='submit' value='Add Review'></input>\r\n                </form>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default AddReview;\r\n","import React, {Component} from 'react';\r\nimport DisplayReview from './DisplayReview';\r\nimport AddReview from './AddReview';\r\nimport '../style.css';\r\n\r\nclass Reviews extends Component{\r\n    state ={\r\n        reviews: [\r\n            {name:'Akanksha Gehlot', title:'Nice content', comment:'Got to know about some really amazing shows', id:101}\r\n        ]\r\n    }\r\n\r\n    addReview = (newReview) =>{\r\n        newReview.id = Math.floor(Math.random() * 10);\r\n        console.log(newReview);\r\n\r\n        let reviews = [...this.state.reviews, newReview];\r\n\r\n        console.log(reviews);\r\n        this.setState({\r\n            reviews : reviews\r\n        })\r\n    }\r\n\r\n    deleteReview = (id) =>{\r\n        console.log(id);\r\n        let newData = this.state.reviews.filter(review =>{\r\n            return review.id !== id;\r\n        })\r\n        console.log(newData);\r\n\r\n        this.setState({\r\n            reviews: newData\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id='review-section'>\r\n                <DisplayReview reviews = {this.state.reviews} deleteReview = {this.deleteReview}/>\r\n                <AddReview addReview = {this.addReview} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Reviews;\r\n","import React from 'react';\r\n\r\nclass ShowList extends React.Component{\r\n        state ={\r\n            isFavourite: false,\r\n            isInfoVisible: false\r\n        }\r\n\r\n        handleClick = (e) =>{\r\n            if(e.target.id === 'fav'){\r\n                this.setState(prevProps =>{\r\n                    return{\r\n                        isFavourite : !prevProps.isFavourite\r\n                    }\r\n                })\r\n            }else{\r\n                this.setState(prevProps =>{\r\n                    return{\r\n                        isInfoVisible : !prevProps.isInfoVisible\r\n                    }\r\n                })\r\n            }\r\n            \r\n        }\r\n\r\n        render(){\r\n            const {show, genres, str} = this.props;\r\n            let myStyle ={\r\n                display: this.state.isInfoVisible?'block':'none'\r\n            }\r\n\r\n            return(\r\n                <div className ='main-section-item' key = {show.id}>\r\n                    <div className='image-div'>\r\n                    <img src= {show.image !== null? show.image.medium : '#'} className=\"img-fluid  shadow p-3 mb-5 bg-white rounded\" alt='Not found'/>\r\n                    </div>\r\n                    \r\n                    \r\n                    <div className='info'>\r\n                        <h2 onClick={this.handleClick} title = \"Know more\">{show.name}&nbsp;<span>{this.state.isFavourite? '|Favourite|': ''}</span></h2>\r\n                        <p>({show.network !== null ? show.network.name + \", \" + show.premiered : show.premiered })</p>\r\n                        <div>\r\n                            <h3>Show Info</h3>\r\n                            <ul>\r\n                                <li>\r\n                                    <span className='span-1'>Status: </span>\r\n                                    <span>{show.status}</span>\r\n                                </li>\r\n                                <li>\r\n                                    <span className='span-1'>Genres: </span>\r\n                                    <span>{genres? genres: 'not available'}</span>\r\n                                </li>\r\n                                <li>\r\n                                    <span className='span-1'>Type: </span>\r\n                                    <span>{show.type}</span>\r\n                                </li>\r\n                                <li>\r\n                                    <span className='span-1'>Language: </span>\r\n                                    <span>{show.language}</span>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                        <br></br>\r\n                        <button id='fav' className=\"btn btn-outline-dark\" onClick ={this.handleClick}>{this.state.isFavourite? 'Remove ': 'Add '}Favourite</button>\r\n                    </div>\r\n               \r\n                    <div className='main-section-text' style={myStyle}>\r\n                        <p>{str}</p>\r\n                    </div>    \r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default ShowList;","import React from 'react';\r\nimport ShowList from './ShowList';\r\n\r\nconst Shows = ({shows}) =>{\r\n\r\n    const showList = shows.length ? shows.map( show =>{\r\n\r\n        const genres = show.genres.join(' | ');\r\n        let str = show.summary;\r\n        //console.log(str);\r\n        if(str){\r\n            str = str.replace(/(<([^>]+)>)/ig, ' ' );\r\n            str = str.replace(/&amp;/gi, 'and');\r\n        }\r\n\r\n        return(\r\n            <ShowList show={show} genres={genres} str={str} id={show.id}/>\r\n        )\r\n    }) : (<p>Data not available</p>);\r\n\r\n    return(\r\n         <div className='main-section'>\r\n             {showList}\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Shows;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport Navbar from './components/Navbar';\r\nimport Footer from './components/Footer';\r\nimport Reviews from './components/Reviews';\r\nimport Shows from './components/Shows';\r\n\r\nclass App extends Component{\r\n  \r\n  state = {\r\n    shows:[],\r\n    prevEpisodes: []\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log('I am in mounting phase!!');\r\n    axios.get('https://api.tvmaze.com/search/shows?q=friends')\r\n      .then( response => {\r\n          //mapping required data\r\n          const content = response.data.map( item =>{\r\n              return(\r\n                item.show\r\n              )\r\n          })\r\n          this.setState({\r\n            shows: content\r\n          })\r\n          console.log(this.state.shows);\r\n\r\n          //mapping previous episodes API's\r\n          const links = content.map( item =>{\r\n            return(\r\n                item._links.previousepisode || item._links.nextepisode\r\n            )\r\n          })\r\n          this.setState({\r\n            links: links\r\n          })\r\n          console.log(this.state.links);\r\n      })    \r\n  }\r\n\r\n  render(){\r\n    \r\n    return(\r\n      <div>\r\n        <Navbar />\r\n        <Shows shows = {this.state.shows} />\r\n        <Reviews />\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}